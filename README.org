#+title: Py5Canvas - A(nother) simple processing-like interface for Python

Py5Canvas is a simple library that allows to draw 2d graphics in Python with an interface that is designed for users that are familiar to Processing and P5js.
It is designed to work in Python notebooks, as a replacement to Matplotlib for creative coding prototypes and for simple interactive applications.

The library consists of two main components. The ~canvas~ API and a command line program ~py5sketch~ that allows to run interactive programs based on the same API. The ~canvas~ API exposes functionalities similar to Processing and P5js, facilitating the composition and generation of 2d graphics. It uses [[https://pycairo.readthedocs.io/en/latest/][pyCairo]] as a graphics backend and uses [[https://matplotlib.org][Matplotlib]] to visualize graphics in Python notebooks. The ~py5sketch~ program allows to run and view a Python script (the "sketch") that uses the ~canvas~ API in an interactive window, and automatically reloads the script whenever it is saved. It uses [[https://pyglet.readthedocs.io/en/latest/][Pyglet]] as a backend.

The main idea behind this system is to facilitate the development of creative and interactive machine learning applications.

* Dependencies and installation
The main requirements for Py5Canvas are [[https://numpy.org][NumPy]], [[https://matplotlib.org][Matplotlib]], [[https://pycairo.readthedocs.io/en/latest/][pyCairo]] and [[https://pyglet.readthedocs.io/en/latest/][Pyglet]]. Pyglet is only necessary if you want to use interactivity. It is recommended to use the [[Miniconda][https://docs.conda.io/en/latest/miniconda.html]] (or Anaconda) package manager to install the dependencies when possible. When doing so install the dependencies with:
#+begin_example
conda install -c conda-forge numpy matplotlib pycairo
#+end_example
Then install the latest version of Pyglet with
#+begin_example
pip install pyglet
#+end_example

** Install Py5Canvas
To install Py5Canvas clone the repository in a given directory, e.g. with
#+begin_example
git clone https://github.com/colormotor/py5canvas.git
#+end_example
or by using your Git frontend of choice.
Then navigate to the ~py5canvas~ directory and install locally with
#+begin_example
pip install -e .
#+end_example

* Usage
** Canvas API
Once installed you can use the canvas API in a notebook (or Python program) by simply importing it. This is a simple example that will save an image and show it with Matplotlib:
#+begin_src python
from py5canvas import canvas

# Create our canvas object
c = canvas.Canvas(512, 512)

# Clear background to black
c.background(0)
# Set stroke only and draw circle
c.stroke(128)
c.no_fill()
c.stroke_weight(5)
c.circle(c.width/2, c.height/2, 100)
# Draw red text
c.fill(255, 0, 0)
c.text_size(30)
c.text([c.width/2, 40], "Hello world", center=True)
# Save image
c.save_image('test.png')
c.show()
#+end_src

In general, the syntax is very similar to P5js but it uses ~snake_case~ as a syntax convention, and it requires explicitly referencing a ~Canvas~ object rather than exposing this functionality globally. For more detailed instructions refer to this notebook.

** py5sketch
While the Canvas API alone does not supprt interactivity, the ~py5sketch~ program allows to create simple "sketches" that can be run interactively in a window.

*** A basic example
Let's look at a simple example (~basic_animation.py~) that generates a rotating circle that leaves a trail behind

#+begin_src python
def setup():
    sketch.create_canvas(512, 512)
    sketch.frame_rate(60)

def draw():
    c = sketch.canvas # Get the base canvas

    c.background(0, 0, 0, 8) # Clear with alpha will create the "trail effect"
    c.push()
    # Center of screen
    c.translate(c.width/2, c.height/2)
    # Draw rotating circle
    c.fill(255, 0, 0)
    c.stroke(255)
    c.rotate(sketch.frame_count*0.05)
    c.circle(100, 0, 20)
    c.pop()
#+end_src

To run this script navigate to the directory where it is located and from the command line run
#+begin_example
py5sketch basic_animation.py
#+end_example

This will open a window with the sketch.

Similarly to P5js and Processing, the sketch revolves around two functions: ~setup~ and a ~draw~. The first is called once and can be used to setup the sketch. The second is called every frame and can be used to update our animation.

*** Main differences with JS/Java
While the structure of a sketch is similar to P5js or Processing there are a number of differences to take into account.

**** The ~sketch~ object
First, you will note that setup refers to a ~sketch~ object. This is automatically exposed to the script and takes care of functionalities such as, creating our ~Canvas~ object and window with ~sketch.create_canvas~, setting up the desired frame rate or getting interactive information as the number of frames since the script has been launched (~sketch.frame_count~).

and that we explicitly need to refer to the ~Canvas~ contained in it to draw things. The ~sketch~ object takes care exposes functionalities such as setting up the window and interactive information such as the number of frames since the sketch has been launched. It is automatically inserted into the scope of the script by the ~py5sketch~ program.

Also, note that in the ~draw~ function we have the line
#+begin_src python
c = sketch.canvas
#+end_src

**** The sketch Canvas
In order to draw things in the window we need to use a ~Canvas~ object that has been created inside the ~sketch~ instance. The canvas is accessible as ~sketch.canvas~.

In the the ~draw~ function you will notice the line
#+begin_src python
c = sketch.canvas
#+end_src
this assigns the canvas to a local variable called ~c~ to make the code less verbose and for consistency with the other examples that use the Canvas API in a non-interactive setting.


**** Why do we need these extra objects
It would be possible to create an interface that does not require referring to a ~sketch~ or to the canvas similarly to Processing. However I've decided to not do that as this would result in additional complexity and internal boilerplate code, and would result in an API that is different for non-interactive and interactive uses of the ~Canvas~ object.
