#+title: Py5Canvas - A(nother) simple processing-like interface for Python

Py5Canvas is a simple library that allows to draw 2d graphics in Python with an interface that is designed for users that are familiar to Processing and P5js.
The library is designed to work inside Python notebooks, as a replacement to Matplotlib and within an appositely built sandbox, for creative coding of simple interactive applications.

The library consists of two main components: The ~canvas~ API for generating 2d graphics and a command line program ~py5sketch~ that allows to run the same API interactively. The ~canvas~ API exposes functionalities similar to Processing and P5js, thus facilitating the composition and generation of 2d graphics. It uses [[https://pycairo.readthedocs.io/en/latest/][pyCairo]] as a graphics backend and uses [[https://matplotlib.org][Matplotlib]] to visualize graphics witin Python notebooks. The ~py5sketch~ program allows to run and view a Python script (the "sketch") that uses the ~canvas~ API in an interactive window. The program will automatically reload the script whenever it is saved. It uses [[https://pyglet.readthedocs.io/en/latest/][Pyglet]] as a backend.

The main idea behind this system is to facilitate the development of creative and interactive machine learning applications.

* Dependencies and installation
The main requirements for Py5Canvas are [[https://numpy.org][NumPy]], [[https://matplotlib.org][Matplotlib]], [[https://pycairo.readthedocs.io/en/latest/][pyCairo]] and [[https://pyglet.readthedocs.io/en/latest/][Pyglet]]. Pyglet is only necessary if you want to use interactivity. It is recommended to use the [[Miniconda][https://docs.conda.io/en/latest/miniconda.html]] (or Anaconda) package manager to install the dependencies when possible. To fully use the Canvas API with video input, you will also need [[https://opencv.org][OpenCV]], The conda instructions below include it, but it is not essential.  Using conda you can rapidly install the dependencies with:
#+begin_example
conda install -c conda-forge numpy matplotlib pycairo opencv
#+end_example
Then install the latest version of Pyglet with
#+begin_example
pip install pyglet
#+end_example

** Optional (but suggested) extensions
If you want OpenSoundControl (OSC) support, you will need to also install [[https://pypi.org/project/python-osc/][python-osc]] with:
#+begin_example
pip install python-osc
#+end_example

If you want to use a GUI and save/load parameters install [[https://pypi.org/project/imgui/][PyImGui]], [[https://pypi.org/project/easydict/][EasyDict]] and [[https://github.com/xMGZx/xdialog][xdialog]] with:
#+begin_example
pip install imgui[pyglet]
pip install easydict
pip install xdialog
#+end_example


** Install Py5Canvas
To install Py5Canvas clone the repository in a given directory, e.g. with
#+begin_example
git clone https://github.com/colormotor/py5canvas.git
#+end_example
or by using your Git frontend of choice.
Then navigate to the ~py5canvas~ directory and install locally with
#+begin_example
pip install -e .
#+end_example

* Usage
** Canvas API
Once installed you can use the canvas API in a notebook (or Python program) by simply importing it. This is a simple example that will save an image and show it with Matplotlib:
#+BEGIN_SRC jupyter-python :session py :results none
from py5canvas import canvas

# Create our canvas object
c = canvas.Canvas(512, 512)

# Clear background to black
c.background(0)
# Set stroke only and draw circle
c.stroke(128)
c.no_fill()
c.stroke_weight(5)
c.circle(c.width/2, c.height/2, 100)
# Draw red text
c.fill(255, 0, 0)
c.text_size(30)
c.text([c.width/2, 40], "Hello world", center=True)
# Save image
# c.save_image('./images/canvas.png')
c.show()
#+end_src

[[./images/canvas.png]]

In general, the syntax is very similar to P5js but it uses ~snake_case~ as a syntax convention, and it requires explicitly referencing a ~Canvas~ object rather than exposing this functionality globally. For more detailed instructions refer to [[https://github.com/colormotor/py5canvas/blob/main/examples/canvas_tutorial.ipynb][this notebook]].

#+begin_quote
The Canvas object is intended to be a simple interface on top of [[https://pycairo.readthedocs.io/en/latest/][pyCairo]], but it does not expose all the functionalities of the API. If necessary, these can be accessed with the ~ctx~ class variable.
#+end_quote
** py5sketch
While the Canvas API alone does not supprt interactivity, the ~py5sketch~ program allows to create simple "sketches" that can be run interactively in a window.

*** A basic example
Let's look at a simple example (~basic_animation.py~) that generates a rotating circle that leaves a trail behind

#+begin_src python
def setup():
    create_canvas(512, 512)

def draw():
    background(0, 0, 0, 8) # Clear with alpha will create the "trail effect"
    push()
    # Center of screen
    translate(c.width/2, c.height/2)
    # Draw rotating circle
    fill(255, 0, 0)
    stroke(255)
    rotate(sketch.frame_count*0.05)
    circle(100, 0, 20)
    pop()
#+end_src

To run this script navigate to the directory where it is located and from the command line run
#+begin_example
py5sketch basic_animation.py
#+end_example

This will open a window with the sketch.

Similarly to P5js and Processing, the sketch revolves around two functions: ~setup~ and a ~draw~. The first is called once and can be used to setup the sketch. The second is called every frame and can be used to update our animation.

*** Main differences with JS/Java
In general the structure and syntax of a sketch is very similar to P5js or Processing. The main difference is the "snake_case" convention, so function and variable names have words separated by underscores and not capitals. As an example the function ~createCanvas~ will be ~create_canvas~ instead.

However, there are a number of differences to take into account.

**** Globals
Differently from Javascript or Java, Python does not allow modifications to globals from within a function by default. For example this code snippet
#+BEGIN_SRC python
foo = 10
def draw():
    print(foo)
    foo += 1
#+END_SRC
will print the value of ~foo~ but incrementing the variable will not work. To make this work we need to explicitly declare
~foo~ as a global. In the following example we declare two variables as globals allowing the function to modify both.
#+begin_src python
foo = 10
bar = 20
def draw():
    global foo, bar
    foo += 1
    bar -= 1
#+end_src
***** Avoiding globals with a container
One way to avoid haing to declare globals every time is to put the parameters that can be modified within a function inside a container. As an example, we could use an anonymous function or an [[https://pypi.org/project/easydict/][EasyDict]] dictionary. The anonymous function trick would be as follows:
#+begin_src python
params = lambda: None
params.foo = 10
params.bar = 20

def draw():
    params.foo += 1
    params.bar -= 1
#+end_src
An alternative, that is also useful to automatically create a GUI and save/load parameters is using [[https://pypi.org/project/easydict/][EasyDict]], which allows accessing elements of a dictionary without using quotes:
#+begin_src python
from easydict import EasyDict as edict
params = edict({
    'foo': 10,
    'bar': 20 })

def draw():
    params.foo += 1
    params.bar -= 1
#+end_src
Refer to the section on GUI and parameters to see how this can also be used to handle sketch parameters.


**** The ~sketch~ and ~canvas~ objects
Behind the hood a sketch uses two main components: A ~sketch~ object that handles the script running and updates and a ~sketch.canvas~ object that handles drawing 2d graphics.

By default, the ~py5sketch~ program exposes the methods of these objects as globals, so it is not necessary to reference these objects explicitly. However, while easy to remember, function names like ~scale~, ~rotate~ etc, are quite common words and it is easy to overwrite them by mistake while writing a script. For example this sketch won't work:
#+begin_src python
scale = 1.0

def setup():
    create_canvas(512, 512)

def draw():
    background(0)
    translate(width/2, height/2)
    scale(0.5)
    circle(0, 0, 100)
#+end_src

Since we have overridden the function ~scale~ with a variable ~scale~. We can avoid these situations by referring to the canvas (or sketch explicitly), with a variable ~c~ automatically set to refer to the ~sketch.canvas~ object (for brevity). So the following will work:
#+begin_src python
scale = 1.0

def setup():
    sketch.create_canvas(512, 512)

def draw():
    c.background(0)
    c.translate(c.width/2, c.height/2)
    c.scale(0.5)
    c.circle(0, 0, 100)
#+end_src
We could identically refer to ~c~ as ~sketch.canvas~.

*** OSC support
If [[https://pypi.org/project/python-osc/][python-osc]] is installed, py5sketch automatically initializes an OSC server and client.
By default, the client will run on localhost address (127.0.0.1) with port 9998,
and the server will listen on port 9999 for any incoming OSC message.

You can configure these parameters by creating an ~osc.json~ file that is located in the same directory as the script.
A default setup would look like this
#+begin_example
{
    'server port': 9999,
    'client address': 'localhost',
    'client port': '9998'
}
#+end_example

These parameters will not change until you restart py5sketch.


If a ~received_osc(addr, value)~ function is defined in the sketch, this will be automatically called any time an OSC message is received, with ~addr~ containing the messsage address (as a string) and ~value~ containing the message contents.

To send an osc message at any time, use the ~sketch.send_osc(addr, value)~.

See the [[./examples/osc_example.py]] script and the [[./examples/osc_example.maxpat]] Max MSP patch for a usage example.

*** GUI support and parameters
The ~py5sketch~ program can be used in combination with the [[https://pypi.org/project/imgui/#files][Python bindings]] of [[https://github.com/ocornut/imgui][Dear ImGui]], an [[https://pyimgui.readthedocs.io/en/latest/guide/first-steps.html#what-is-immediate-mode-gui]["immediate mode" UI]] built on top of OpenGL. A basic usage example can be found in the ~imgui_test.py~ example.

**** Parameters and automatic GUI

While one can use the immediate mode paradigm to create a dynamic UI in the ~draw~ function, it is also possible to automatically create an UI for a given number of parameters.
The parameters are defined by passing a dictionary to the ~sketch.parameters~ function, e.g.:
#+begin_src python
params = {'Width': (100, {'min': 10, 'max': 200}),
          'Height': (100, {'min': 10, 'max': 200}),
          'rectangle color': ([255, 0, 0], {'type':'color'})}
params = sketch.parameters(params)
#+end_src

[[./images/params.jpg]]

This syntax defines the parameters and then uses the ~sketch.parameters~ function to tell ~py5sketch~ that we will be using these. The function returns a new dictionary that can be used more conveniently by the sketch. If [[https://pypi.org/project/easydict/][EasyDict]] is installed, the parameters can be more conveniently accessed with the dot notation, e.g. ~params.width~ or ~params.rectangle_color~. Note that the parameter names we defined contain spaces and capitals. These will be automatically converted to names that are all lower-case and with spaces replaced by underscores. The names originally specified will instead appear by deault as labels when the GUI is created.

You can create groups/subparameters (also in the GUI) by adding an entry to the dictionary that is a dictionary itself. See the ~parameters.py~ script for an example.

***** Showing the GUI
To automatically visualize the GUI, you will need to use the ~create_canvas_gui~ function instead of ~create_canvas~ in ~setup~, e.g.:
#+begin_src python
def setup():
    create_canvas_gui(512, 512, 300)
#+end_src
The third parameter determines the width of the GUI, and the window that will be created will be the canvas width plus the speciied GUI width (in the example above ~815~ pixels).
***** Parameter widget types
When automatically creating a GUI, the ~py5sketch~ program uses the type of the parmameter and options to infer what widget will be visualized:

****** Boolean
   - Widget: *Checkbox*
   - Options: None
****** Integer
   - Widget: Integer input field, Integer slider or Combo (dropdown selection).
   - Options:
     - *Value box* (no options specified)
     - *Slider* (~min~ and ~max~ options are specified)
     - *Combo* (~selection~ is specified with a list of strings)
****** Float
   - Widget: Float input field or Float slider
   - Options:
     - *Value box* (no options specified)
     - *Slider* (~min~ and ~max~ options are specified)
****** String
   - Widget: Single-line or multi-line text input field
   - Options:
     - Maximum buffer length, ~buf_length~ key in opts (default to: ~1024~)
     - *Multiline text input* if the ~multiline:True~ option is defined.
****** Callable (the name of a function)
   - Widget: *Button*
   - Options: None
****** Float Array
   - Widget: Value boxes, sliders or a color picker
   - Options:
     - *Color selector* if the ~type='color'~ option is specified. The length of the array must be 3 or 4.
     - *Sliders* if the ~min~ and ~max~ options are specified
     - *Value boxes* if no options are specified

****** Integer Array
   - Widget: Value boxes, sliders or a color picker
   - Options:
     - *Sliders* if the ~min~ and ~max~ options are specified
     - *Value boxes* if no options are specified

**** Auto saving
Creating parameters as described above will result in the parameters being automatically saved and loaded every time a sketch is reloaded. The parameters will be saved to a JSON file having the same name and directory as the sketch script.
