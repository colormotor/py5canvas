#+title: Canvas Api

#+BEGIN_SRC python :results output raw :exports none
from py5canvas import canvas
from importlib import reload
import ast
reload(canvas)
from IPython.display import publish_display_data, clear_output

def disp(s):
    #print(s)
    publish_display_data({'text/org':'%s\n\n'%s})

def parse_class_with_docs_and_args(file_path, class_name):
    with open(file_path, "r") as f:
        tree = ast.parse(f.read())

    class_info = {"methods": []}

    # Find the class in the file
    for node in ast.walk(tree):
        if isinstance(node, ast.ClassDef) and node.name == class_name:
            # Get class docstring
            class_info["docstring"] = ast.get_docstring(node) or "No class docstring available"

            # Process methods
            for n in node.body:
                if isinstance(n, ast.FunctionDef):
                    # Get method name
                    method_name = n.name

                    # Get method arguments (skip 'self')
                    args = [arg.arg for arg in n.args.args if arg.arg != 'self']

                    is_property = any(
                        isinstance(decorator, ast.Name) and decorator.id == 'property'
                        for decorator in n.decorator_list
                    )

                    # Get docstring (if exists)
                    docstring = ast.get_docstring(n)
                    if docstring:
                        class_info["methods"].append((method_name, args, is_property, docstring))

    return class_info

classname = 'Canvas'
info = parse_class_with_docs_and_args(canvas.__file__, classname)
print('** ~%s~ class'%classname)
print('%s\n'%info['docstring'])

for name, args, is_property, doc in info['methods']:
    if '__' in name or name[0] == '_':
        continue
    if is_property:
        print('*** ~%s~ (property)'%name)
    else:
        if args:
            print('*** ~%s(...)~'%name)
        else:
            print('*** ~%s()~'%name)
    print('%s\n'%doc)
#+END_SRC

#+RESULTS:
